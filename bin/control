#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH
export STOPTIMEOUT=20

function _log() {
	echo "$(date): $@" >> $OPENSHIFT_MEMCACHED_DIR/logs/memcached.log
}

function read_pid() {
    if [ -f $OPENSHIFT_MEMCACHED_DIR/pid/memcached.pid ]; then
        echo $(<$OPENSHIFT_MEMCACHED_DIR/pid/memcached.pid)
    fi
}

function read_stunnel_pid() {
    if [ -f $OPENSHIFT_MEMCACHED_DIR/pid/stunnel.pid ]; then
        echo $(<$OPENSHIFT_MEMCACHED_DIR/pid/stunnel.pid)
    fi
}

function isrunning() {
    local pid=`read_pid`
    kill -0 "$pid" 2>/dev/null || return 1
}

function isstunnelrunning() {
    local pid=`read_stunnel_pid`
    kill -0 "$pid" 2>/dev/null || return 1
}

function _wait_for_memcached_to_startup() {
    for ((i=0; i<20; i++)); do
        if [ -f ${OPENSHIFT_MEMCACHED_DIR}/pid/memcached.pid ]; then
            if memcached-tool $OPENSHIFT_MEMCACHED_HOST:$OPENSHIFT_MEMCACHED_PORT &>/dev/null; then
                return 0
            fi
        fi
        sleep 0.5
    done
    return 1
}

function start_stunnel() {

    if ! isstunnelrunning
    then

        stunnel ${OPENSHIFT_MEMCACHED_DIR}conf/stunnel.conf

        if [ $? -ne 0 ]; then
            client_message "Stunnel has failed to start"
            _log "Stunnel has failed to start"
        fi
        if [ -f ${OPENSHIFT_MEMCACHED_DIR}/pid/stunnel.pid  ]; then
            client_result "Stunnel started"
            _log "Stunnel started with PID=$(read_stunnel_pid)"
        fi
    else
        client_result "Stunnel already running"
    fi

}



function start() {
    if ! isrunning
    then
        memcached -d -p $OPENSHIFT_MEMCACHED_PORT -U 0 -l $OPENSHIFT_MEMCACHED_HOST -u `id -u` -m $CACHESIZE -c $MAXCONN -P $OPENSHIFT_MEMCACHED_DIR/pid/memcached.pid $OPTIONS &>> $OPENSHIFT_MEMCACHED_DIR/logs/memcached.log

        if [ $? -ne 0 ]; then
            client_message "Memcached has failed to start"
            _log "Memcached has failed to start"
        fi
        if _wait_for_memcached_to_startup; then
            client_result "Memcached started"
            _log "Memcached started with PID=$(read_pid), OPTIONS=\"$OPTIONS\""
        fi
    else
        client_result "Memcached already running"
    fi
}


function stop_stunnel() {
    local pid=`read_stunnel_pid`

    if [ -n "$pid" ]; then
        if kill "$pid" 2>/dev/null; then
            TIMEOUT="$STOPTIMEOUT"
            while [ $TIMEOUT -gt 0 -a -f "$OPENSHIFT_MEMCACHED_DIR/pid/stunnel.pid" ]; do
                kill -0 "$pid" 2>/dev/null || break
                sleep 1
                let TIMEOUT=${TIMEOUT}-1
            done
            /bin/rm -f $OPENSHIFT_MEMCACHED_DIR/pid/stunnel.pid
            _log "Stunnel stopped"
        fi
    else
        if `pgrep -x stunnel >/dev/null 2>&1`
        then
            client_message "Stunnel process exists without a pid file. Use force-stop to kill."
        else
            client_result "Stunnel already stopped"
        fi
     fi

}

function stop() {
    local pid=`read_pid`

    if [ -n "$pid" ]; then
        if kill "$pid" 2>/dev/null; then
            TIMEOUT="$STOPTIMEOUT"
            while [ $TIMEOUT -gt 0 -a -f "$OPENSHIFT_MEMCACHED_DIR/pid/memcached.pid" ]; do
                kill -0 "$pid" 2>/dev/null || break
                sleep 1
                let TIMEOUT=${TIMEOUT}-1
            done
            /bin/rm -f $OPENSHIFT_MEMCACHED_DIR/pid/memcached.pid
            _log "Memcached stopped"
        fi
    else
        if `pgrep -x memcached >/dev/null 2>&1`
        then
            client_message "Memcached process exists without a pid file. Use force-stop to kill."
        else
            client_result "Memcached already stopped"
        fi
     fi
}

case "$1" in
    start)
        start
        start_stunnel
    ;;
    stop)
        stop
        stop_stunnel
    ;;
    restart)
        stop
        stop_stunnel
        start
        start_stunnel
    ;;
    status)
        if isrunning
        then
            client_result "Memcached is running"
        else
            client_result "Memcached is stopped"
        fi
        if isstunnelrunning
        then
            client_result "Stunnel is running"
        else
            client_result "Stunnel is stopped"
        fi
        exit 0
    ;;
esac
